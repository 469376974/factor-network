/*!
 * factor-network.js v1.0.0
 * (c) 2017-03-28 Jade Gu
 * Released under the MIT License.
 * @license
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.FactorNetwork=t.FactorNetwork||{})}(this,function(t){"use strict";function e(t){return 1/(1+Math.exp(-t/1))}function n(){return 2*Math.random()-1}function i(){return Math.random()<=.5}var u=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];u(this,t),this.value=n,this.weightList=i,this.activation=e}return o(t,[{key:"populate",value:function(t){for(var e=this.weightList,i=0;i<t;i++)e.push(n())}},{key:"repopulate",value:function(){var t=this.weightList.length;this.weightList=[],this.populate(t)}},{key:"computeByInput",value:function(t){this.value=t}},{key:"computeByInputs",value:function(t){for(var e=0,n=0,i=t.length;n<i;n++)e+=t[n].value*this.weightList[n];this.value=this.activation(e)}},{key:"clone",value:function(){return new t(this.value,this.weightList.concat())}},{key:"mix",value:function(t){for(var e=this.weightList,n=0,u=e.length;n<u;n++)i()&&(e[n]=t.weightList[n])}}]),t}(),a=function(){function t(e){u(this,t),this.index=e,this.neuronList=[]}return o(t,[{key:"populate",value:function(t,e){for(var n=this.neuronList,i=0;i<t;i++){var u=new r;u.populate(e),n.push(u)}}},{key:"compute",value:function(t){0===this.index?this.computeByInputs(t):this.computeByPrevious(t)}},{key:"computeByInputs",value:function(t){for(var e=0,n=t.length;e<n;e++)this.neuronList[e].computeByInput(t[e])}},{key:"computeByPrevious",value:function(t){for(var e=this.neuronList,n=t.neuronList,i=0,u=e.length;i<u;i++)e[i].computeByInputs(n)}},{key:"output",value:function(){for(var t=[],e=0,n=this.neuronList.length;e<n;e++)t.push(this.neuronList[e].value);return t}},{key:"clone",value:function(){for(var e=new t(this.index),n=this.neuronList,i=0,u=n.length;i<u;i++)e.neuronList.push(n[i].clone());return e}},{key:"mix",value:function(t){for(var e=this.neuronList,n=0,i=e.length;n<i;n++)e[n].mix(t.neuronList[n])}}]),t}(),s=function(){function t(){u(this,t),this.layerList=[]}return o(t,[{key:"populate",value:function(t,e,n){for(var i=this.layerList,u=[t].concat(e,n),o=0,r=0,s=u.length;r<s;r++){var h=u[r],l=new a(r);l.populate(h,o),i.push(l),o=h}}},{key:"compute",value:function(t){for(var e=this.layerList,n=t,i=0,u=e.length;i<u;i++)e[i].compute(n),n=e[i];return e[e.length-1].output()}},{key:"clone",value:function(){for(var e=this.layerList,n=new t,i=0,u=e.length;i<u;i++)n.layerList.push(e[i].clone());return n}},{key:"mix",value:function(t,e){for(var i=this.layerList,u=0,o=i.length;u<o;u++)i[u].mix(t[u]);this.each(function(t){for(var i=0,u=t.weightList.length;i<u;i++)Math.random()<=e.rate&&(t.weightList[i]+=e.range*n())})}},{key:"each",value:function(t){for(var e=this.layerList,n=0,i=e.length;n<i;n++)for(var u=e[n].neuronList,o=0,r=u.length;o<r;o++)t(u[o])}}]),t}();t.Network=s,Object.defineProperty(t,"__esModule",{value:!0})});